
% Example 3. Curved Disc

% Create object of type CurvedDisc, with associated folder

mydisc3 = CurvedDisc();
mydisc3 = mydisc3.set_folder('..\myfolder3');
mydisc3 = mydisc3.reinitialise();   % in case you run this script more than once

% Set properties:

% 1) Geometry properties:

mydisc3.substrate.diameter = 0.0254;
mydisc3.substrate.thickness = .3e-3;

mydisc3 = mydisc3.set_curvature(1);  % Curvature radius (supposed to be large)

% 2) Material properties:

mydisc3.substrate.material = Material('silica');

% 3) Set the temperature:

mydisc3.substrate.material = mydisc3.substrate.material.set_temperature(300);

% 4) Mesh settings

mydisc3.mesh_settings.method = 'sweep';
mydisc3.mesh_settings.divisions = 5;  % no. of elements along the thickness                  
mydisc3.mesh_settings.fineness = mydisc3.substrate.diameter/20;  % element size   

% 5) Calculation settings

% Let Ansys create a list of modes, according to the following constraints
mydisc3.calculation_settings.max_number_of_modes = 20;
mydisc3.calculation_settings.max_frequency = 100000;
mydisc3.calculation_settings.min_frequency = 100;  % already the default

% Create a vector-list of the modes of interest, whose results will be saved.
% (The numbers in this vector-list are referred to the position occupied in the 
% Ansys's list above; i.e. mode_list = [10:15] selects the 10th to 15th among the modes
% found by Ansys, within the constraints specified)

mydisc3.calculation_settings.mode_list = [10:15];  % modes of interest

% The results for each mode will be saved in a sub-folder labeled by 
% the mode number, e.g. "10" to "15" in this case

% 6) Calculate with Ansys

workbench_out = mydisc3.ansys_workbench_calculate();
mydisc3 = mydisc3.ansys_apdl_calculate();

% 7) Save the MatLab variable "mydisc3" (within the project folder)

mydisc3.save();

%%%%%%%%%%%%%%%%%%%%%%%%%%

% Create object of type Disc (flat), with associated folder,
% and assign to it the same properties as the previous object

mydisc0 = Disc();
mydisc0 = mydisc0.set_folder('..\myfolder3-flat');
mydisc0 = mydisc0.reinitialise();

mydisc0.substrate.diameter = mydisc3.substrate.diameter;
mydisc0.substrate.thickness = mydisc3.substrate.thickness;

material_key = mydisc3.substrate.material.keyword;
temperature = mydisc3.substrate.material.temperature;

mydisc0.substrate.material = Material(material_key);
mydisc0.substrate.material = mydisc0.substrate.material.set_temperature(temperature);

mydisc0.mesh_settings.method = mydisc3.mesh_settings.method;
mydisc0.mesh_settings.divisions = mydisc3.mesh_settings.divisions;
mydisc0.mesh_settings.fineness = mydisc3.mesh_settings.fineness;

mydisc0.calculation_settings.max_number_of_modes = mydisc3.calculation_settings.max_number_of_modes;
mydisc0.calculation_settings.max_frequency = mydisc3.calculation_settings.max_frequency;
mydisc0.calculation_settings.min_frequency = mydisc3.calculation_settings.min_frequency;

mydisc0.calculation_settings.mode_list = mydisc3.calculation_settings.mode_list;

workbench_out0 = mydisc0.ansys_workbench_calculate();
mydisc0 = mydisc0.ansys_apdl_calculate();

mydisc0.save();

%%%%%%%%%%%%%%%%%%%%%%%%%%

% Identify the kind of mechanical modes found by Ansys.
% To do this, you can open Ansys in interactive mode, and run in DesignModeler
% the file "myfolder3\support_files\geom.js", generated by this program. 
% Then, in Mechanical, set the material properties and run the macro 
% "myfolder3\support_files\mech_edited.py", generated by this program.
% Check that the kind of modes follows the same sequence for both 
% curved and flat objects; if not, make the necessary adjustments to this script.

% With the parameters assigned in this script:

butterfly_mode_numbers = [1,2,4,5,8,9,10,11,15,16];
mixed_circ1_mode_numbers = [6,7,12,13,17,18];
mixed_circ2_mode_numbers = [19,20];
drum_mode_numbers = [3,14];

% Convert the mode number in Ansys's list into the position occupied by the 
% mode in the result vectors, e.g. the 10th Ansys mode is the first one of the
% vector list (= the first mode we asked for, in defining the mode_list).

butterfly_mode_indexes = find(ismember(mydisc3.calculation_settings.mode_list,butterfly_mode_numbers)==1);
mixed_circ1_mode_indexes = find(ismember(mydisc3.calculation_settings.mode_list,mixed_circ1_mode_numbers)==1);
mixed_circ2_mode_indexes = find(ismember(mydisc3.calculation_settings.mode_list,mixed_circ2_mode_numbers)==1);
drum_mode_indexes = find(ismember(mydisc3.calculation_settings.mode_list,drum_mode_numbers)==1);

flat_butterfly   = mydisc0.calculation_results.frequency_modes(butterfly_mode_indexes);
curved_butterfly = mydisc3.calculation_results.frequency_modes(butterfly_mode_indexes);

flat_mixed_circ1   = mydisc0.calculation_results.frequency_modes(mixed_circ1_mode_indexes);
curved_mixed_circ1 = mydisc3.calculation_results.frequency_modes(mixed_circ1_mode_indexes);

flat_mixed_circ2   = mydisc0.calculation_results.frequency_modes(mixed_circ2_mode_indexes);
curved_mixed_circ2 = mydisc3.calculation_results.frequency_modes(mixed_circ2_mode_indexes);

flat_drum   = mydisc0.calculation_results.frequency_modes(drum_mode_indexes);
curved_drum = mydisc3.calculation_results.frequency_modes(drum_mode_indexes);

% Calculate and plot the difference in resonant frequency
% between curved and flat objects

butterfly = (curved_butterfly - flat_butterfly)./flat_butterfly*100;
mixed_circ1 = (curved_mixed_circ1 - flat_mixed_circ1)./flat_mixed_circ1*100;
mixed_circ2 = (curved_mixed_circ2 - flat_mixed_circ2)./flat_mixed_circ2*100;
drum = (curved_drum - flat_drum)./flat_drum*100;

figure();
hold on;
frequencies = {flat_butterfly,flat_mixed_circ1,flat_mixed_circ2,flat_drum};
differences = {butterfly,mixed_circ1,mixed_circ2,drum};
names = ["butterfly","mixed (1)","mixed (2)","drum"];
colours = ['b','r','m','g'];
h = [];
for jj =1:4
    if ~isempty(frequencies{jj})
        h(end+1) = plot(frequencies{jj},differences{jj},'o','MarkerFaceColor',colours(jj),'MarkerEdgeColor',colours(jj),'DisplayName',names(jj));
    end
end
h(end+1) = yline(0,'-k','DisplayName','');
xlabel('Frequency (flat) [Hz]');
ylabel('Frequency Variation [%]')
legend(h(1:end));




% This program is free software; you can redistribute it and/or modify it
% under the terms of the GNU General Public License as published by the
% Free Software Foundation; either version 3 of the License, or (at your
% option) any later version.
%
% This program is distributed in the hope that it will be useful, but
% WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
% Public License for more details.
%
% You should have received a copy of the GNU General Public License along
% with this program; if not, write to the Free Software Foundation, Inc.,
% 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

% F. Fabrizi (2022); federica.fabrizi@uniurb.it



